/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.JFileChooser;
import java.io.File; 
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author sudar
 */

public class home extends javax.swing.JFrame {
    
    class node //creates a structure that holds 
               //document's path in data variable, pointer to next doc in posting list and skip pointer
    {
        String data; //path
        node next; 
        node skip;
        
        node(String a)
        {
            data=a; //initializing through constructor
            next=null;
            skip=null;
        }
        
        node() //null intialization in case of temperory nodes
        {
            data="";
            next=null;
            skip=null;
        }
        
        
    }


    public home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Add Documents");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setToolTipText("");

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //when "Add Documents" is pressed
        JFileChooser fileChooser = new JFileChooser(); //opens up a dialogue box for importing files
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home"))); //takes in file
        int result = fileChooser.showOpenDialog(this);
        File selectedFile=null;
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile(); //if any file is imported, set the file to var selected file
        }
        if(selectedFile!=null)
        {
            try {
                readfilecontents(selectedFile.toString()); //function reads the file content and inserts 
                                                           //every term in doc to the posting list
            } catch (IOException ex) {
                System.out.println("Exception at insert: "+ex); 
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //when "Search" is pressed
        String query; 
        if(jTextField1.getText()!="")
        {
            query=jTextField1.getText(); //take in query from user
            try {
                operatequery(query); //analyze query and display results in text area accordingly
            } catch (IOException ex) {
                System.out.println("Exception at search: "+ex);
            }
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed
    
    
    HashMap<String,node> map=new HashMap<>(); // A dictionary of terms pointing to their respective posting lists
    
    public void operatequery(String q) throws IOException
    {
        //We operate on query by using Boolean AND operator on all individual terms 
        String[] qs=q.split(" "); //split all query terms
        if(qs.length==1)
        {
            printlist(findlist(qs[0])); //if only one term, display its posting list
            return;
        }
        
        //findlist() give the posting list of respective term
        
        List<String> l=matchlist(findlist(qs[0]),findlist(qs[1])); //Match list will find intersection 
                                                                   //of two posting list
        
        for(int i=2;i<qs.length;i++)
        {
            l=matchlist(l,findlist(qs[i])); //Intersect the obtained list with remaining terms, basically if there
                                            //are 4 terms, this loop is performing T1 AND T2 AND T3 AND T4
        }
        
        printlist(l); //print the obtained list on textarea
    }
    
    public List<String> matchlist(List<String> l1,List<String> l2)
    {
        //intersecting docs between two list
        
        int i=0,j=0; //i points to list1, j to list2
        
        List<String> r=new ArrayList<>();   //intersection list
        
        while(i<l1.size() && j<l2.size())
        {
            
            String cur1=l1.get(i); //curr doc from l1
            String cur2=l2.get(j); //curr doc from l2
            
            if(cur1.equals(cur2)) //if matches add the curr doc to result list
            {
                r.add(cur2);
                i++;
                j++;
            }
            else if(cur1.compareTo(cur2)<0) //else move on to next doc accordingly
            {
                i++;
            }
            else
                j++;
            
        }
        return r;
    }

    public void printMap(HashMap mp) { //Prints the map. Used for debugging, will be helpful while printing the posting list
        Iterator it = mp.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            System.out.print(pair.getKey()+" -> ");
            for(node temp=(node) pair.getValue();;temp=temp.next)
            {
                if(temp!=null)
                    System.out.print(temp.data+" -> ");
                if(temp.next==null)
                    break;
            }

            System.out.println();

        }
        System.out.println("________________________________________");
    }
    
    void printlist(List<String> list) throws IOException //prints the given list to textarea
    {
        String output="";
        for(int i=0;i<list.size();i++)
        {
            output+="File name:"+list.get(i)+"\nContents of file: \n"; //takes the list contents whichis nothing 
                                                                        //but path name of docs
            List<String> lines = Files.readAllLines(Paths.get(list.get(i)));//get contents of that path
            
            for(int j=0;j<lines.size();j++)
                output+=lines.get(j)+"\n"; //store the contents into output string
            output+="\n";
        }
        if(output.equals(""))
            output="Not Found";
            
        jTextArea1.setText(output); //print output to jtextarea
    }
    
    public List findlist(String query) throws IOException //finds posting list from map pertaining to a term
    {
        
        List<String> l=new ArrayList<String>();
        if(map.containsKey(query))
        {
            node tempn=map.get(query);
            while(tempn!=null)
            {
                l.add(tempn.data);
                tempn=tempn.next;   
            }
        }
       
        return l;
    }
    public void readfilecontents(String path) throws IOException //reads a file and makes the corresponding posting list
    {
        
        List<String> lines = Files.readAllLines(Paths.get(path)); //Read all lines from the file into a list

        for(int i=0;i<lines.size();i++)
        {
            StringTokenizer st=new StringTokenizer(lines.get(i)); //for each line tokenize the words
            
            while(st.hasMoreTokens()) //until no new word is yet to be processed
            {
                
                String stemp=st.nextToken(); //next word
                
                boolean flag=true;
                
                
                if(map.containsKey(stemp)) //if already contains word, append to posting list
                {
                    int k=0;
                    node curr=map.get(stemp);
                    
                    if(curr.data.compareTo(path)>0 && curr.data.compareTo(path)!=0) //sort first term in posting list
                    {
                        map.put(stemp,new node(path)); //add doc
                        map.get(stemp).next=curr; 
                        flag=false; //once false, doesn't append the doc in end
                    }
                    
                    while(curr.skip!=null ) //iterate via skip till the position where doc is to be added is found
                    {
                        if(curr.data.equals(path)) //if doc already added, don't add
                        {
                            flag=false;
                            break;
                        }
                        if(curr.skip==null || curr.skip.data.compareTo(path)>0)
                            break;
                        
                        curr=curr.skip;
                    } 
                    
                    node skipassign=curr;//for assigning skip pointers
                    
                    while(curr.next!=null )//iterate via next till the position where doc is to be added is found
                    {
                        if(curr.data.equals(path)) //if doc already added, don't add
                        {
                            flag=false;
                            break;
                        }
                        
                        if(curr.next==null || curr.next.data.compareTo(path)>0)
                            break;
                        curr=curr.next;
                        
                        k++; //for initializing skip pointers
                        
                        if(k==5) //after every 5 nodes, initialize skip pointer
                        {
                            skipassign.skip=curr;
                            k=0; 
                            skipassign =curr;
                        } 
                    }
                    
                    if(!curr.data.equals(path) && flag) //append doc to the end
                    {
                        node tempnode=curr.next;
                        curr.next=new node(path);
                        curr.next.next=tempnode;
                    }
                        

                }
                else //if term not present, create a new term with this name, and initialize its posting list
                {
                    map.put(stemp, new node(path));
                }

            }
        }
        
        
        //
        
        printMap(map);
        
        //
        
        
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
